//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export module StockyApi {

export interface IStockyApi {
    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginRequest | undefined): Promise<LoginResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: RegisterRequest | undefined): Promise<RegisterResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    portfolio(body: UserPortfolioRequest | undefined): Promise<UserPortfolioResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    buy(body: BuyTickerRequest | undefined): Promise<BuyTickerResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    sell(body: SellTickerRequest | undefined): Promise<SellTickerResponse>;
}

export class StockyApi implements IStockyApi {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginRequest | undefined, cancelToken?: CancelToken): Promise<LoginResponse> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<LoginResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LoginResponse.fromJS(resultData200);
            return Promise.resolve<LoginResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LoginResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: RegisterRequest | undefined, cancelToken?: CancelToken): Promise<RegisterResponse> {
        let url_ = this.baseUrl + "/api/Auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: AxiosResponse): Promise<RegisterResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RegisterResponse.fromJS(resultData200);
            return Promise.resolve<RegisterResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RegisterResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    portfolio(body: UserPortfolioRequest | undefined, cancelToken?: CancelToken): Promise<UserPortfolioResponse> {
        let url_ = this.baseUrl + "/api/Portfolio/portfolio";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPortfolio(_response);
        });
    }

    protected processPortfolio(response: AxiosResponse): Promise<UserPortfolioResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserPortfolioResponse.fromJS(resultData200);
            return Promise.resolve<UserPortfolioResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserPortfolioResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    buy(body: BuyTickerRequest | undefined, cancelToken?: CancelToken): Promise<BuyTickerResponse> {
        let url_ = this.baseUrl + "/api/Portfolio/buy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBuy(_response);
        });
    }

    protected processBuy(response: AxiosResponse): Promise<BuyTickerResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BuyTickerResponse.fromJS(resultData200);
            return Promise.resolve<BuyTickerResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BuyTickerResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sell(body: SellTickerRequest | undefined, cancelToken?: CancelToken): Promise<SellTickerResponse> {
        let url_ = this.baseUrl + "/api/Portfolio/sell";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSell(_response);
        });
    }

    protected processSell(response: AxiosResponse): Promise<SellTickerResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SellTickerResponse.fromJS(resultData200);
            return Promise.resolve<SellTickerResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SellTickerResponse>(null as any);
    }
}

export class BuyTickerData implements IBuyTickerData {
    symbol?: string | undefined;
    quantity?: number;
    price?: number;
    totalCost?: number;
    remainingCashBalance?: number;
    transactionTime?: Date;
    transactionId?: string | undefined;
    status?: TransactionStatus;

    constructor(data?: IBuyTickerData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.symbol = _data["symbol"];
            this.quantity = _data["quantity"];
            this.price = _data["price"];
            this.totalCost = _data["totalCost"];
            this.remainingCashBalance = _data["remainingCashBalance"];
            this.transactionTime = _data["transactionTime"] ? new Date(_data["transactionTime"].toString()) : <any>undefined;
            this.transactionId = _data["transactionId"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): BuyTickerData {
        data = typeof data === 'object' ? data : {};
        let result = new BuyTickerData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["symbol"] = this.symbol;
        data["quantity"] = this.quantity;
        data["price"] = this.price;
        data["totalCost"] = this.totalCost;
        data["remainingCashBalance"] = this.remainingCashBalance;
        data["transactionTime"] = this.transactionTime ? this.transactionTime.toISOString() : <any>undefined;
        data["transactionId"] = this.transactionId;
        data["status"] = this.status;
        return data;
    }
}

export interface IBuyTickerData {
    symbol?: string | undefined;
    quantity?: number;
    price?: number;
    totalCost?: number;
    remainingCashBalance?: number;
    transactionTime?: Date;
    transactionId?: string | undefined;
    status?: TransactionStatus;
}

export class BuyTickerRequest implements IBuyTickerRequest {
    symbol!: string;
    quantity!: number;
    price!: number;

    constructor(data?: IBuyTickerRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.symbol = _data["symbol"];
            this.quantity = _data["quantity"];
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): BuyTickerRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BuyTickerRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["symbol"] = this.symbol;
        data["quantity"] = this.quantity;
        data["price"] = this.price;
        return data;
    }
}

export interface IBuyTickerRequest {
    symbol: string;
    quantity: number;
    price: number;
}

export class BuyTickerResponse implements IBuyTickerResponse {
    success?: boolean;
    statusCode?: number;
    message?: string | undefined;
    data?: BuyTickerData;
    error?: string | undefined;

    constructor(data?: IBuyTickerResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.data = _data["data"] ? BuyTickerData.fromJS(_data["data"]) : <any>undefined;
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): BuyTickerResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BuyTickerResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["error"] = this.error;
        return data;
    }
}

export interface IBuyTickerResponse {
    success?: boolean;
    statusCode?: number;
    message?: string | undefined;
    data?: BuyTickerData;
    error?: string | undefined;
}

export class LoginData implements ILoginData {
    token?: string | undefined;

    constructor(data?: ILoginData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): LoginData {
        data = typeof data === 'object' ? data : {};
        let result = new LoginData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data;
    }
}

export interface ILoginData {
    token?: string | undefined;
}

export class LoginRequest implements ILoginRequest {
    email!: string;
    password!: string;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginRequest {
    email: string;
    password: string;
}

export class LoginResponse implements ILoginResponse {
    success?: boolean;
    statusCode?: number;
    message?: string | undefined;
    data?: LoginData;
    error?: string | undefined;

    constructor(data?: ILoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.data = _data["data"] ? LoginData.fromJS(_data["data"]) : <any>undefined;
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): LoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["error"] = this.error;
        return data;
    }
}

export interface ILoginResponse {
    success?: boolean;
    statusCode?: number;
    message?: string | undefined;
    data?: LoginData;
    error?: string | undefined;
}

export class PortfolioData implements IPortfolioData {
    items?: PortfolioItem[] | undefined;
    totalValue?: number;
    cashBalance?: number;
    investedAmount?: number;

    constructor(data?: IPortfolioData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PortfolioItem.fromJS(item));
            }
            this.totalValue = _data["totalValue"];
            this.cashBalance = _data["cashBalance"];
            this.investedAmount = _data["investedAmount"];
        }
    }

    static fromJS(data: any): PortfolioData {
        data = typeof data === 'object' ? data : {};
        let result = new PortfolioData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : <any>undefined);
        }
        data["totalValue"] = this.totalValue;
        data["cashBalance"] = this.cashBalance;
        data["investedAmount"] = this.investedAmount;
        return data;
    }
}

export interface IPortfolioData {
    items?: PortfolioItem[] | undefined;
    totalValue?: number;
    cashBalance?: number;
    investedAmount?: number;
}

export class PortfolioItem implements IPortfolioItem {
    symbol?: string | undefined;
    quantity?: number;
    averageBuyPrice?: number;
    currentPrice?: number;
    totalValue?: number;
    profitLoss?: number;
    profitLossPercentage?: number;
    lastUpdatedTime?: string | undefined;

    constructor(data?: IPortfolioItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.symbol = _data["symbol"];
            this.quantity = _data["quantity"];
            this.averageBuyPrice = _data["averageBuyPrice"];
            this.currentPrice = _data["currentPrice"];
            this.totalValue = _data["totalValue"];
            this.profitLoss = _data["profitLoss"];
            this.profitLossPercentage = _data["profitLossPercentage"];
            this.lastUpdatedTime = _data["lastUpdatedTime"];
        }
    }

    static fromJS(data: any): PortfolioItem {
        data = typeof data === 'object' ? data : {};
        let result = new PortfolioItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["symbol"] = this.symbol;
        data["quantity"] = this.quantity;
        data["averageBuyPrice"] = this.averageBuyPrice;
        data["currentPrice"] = this.currentPrice;
        data["totalValue"] = this.totalValue;
        data["profitLoss"] = this.profitLoss;
        data["profitLossPercentage"] = this.profitLossPercentage;
        data["lastUpdatedTime"] = this.lastUpdatedTime;
        return data;
    }
}

export interface IPortfolioItem {
    symbol?: string | undefined;
    quantity?: number;
    averageBuyPrice?: number;
    currentPrice?: number;
    totalValue?: number;
    profitLoss?: number;
    profitLossPercentage?: number;
    lastUpdatedTime?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class RegisterData implements IRegisterData {
    token?: string | undefined;
    email?: string | undefined;
    userId?: string | undefined;

    constructor(data?: IRegisterData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.email = _data["email"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): RegisterData {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["email"] = this.email;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IRegisterData {
    token?: string | undefined;
    email?: string | undefined;
    userId?: string | undefined;
}

export class RegisterRequest implements IRegisterRequest {
    firstName!: string;
    surname!: string;
    email!: string;
    password!: string;

    constructor(data?: IRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.surname = _data["surname"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["surname"] = this.surname;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterRequest {
    firstName: string;
    surname: string;
    email: string;
    password: string;
}

export class RegisterResponse implements IRegisterResponse {
    success?: boolean;
    statusCode?: number;
    message?: string | undefined;
    data?: RegisterData;
    error?: string | undefined;

    constructor(data?: IRegisterResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.data = _data["data"] ? RegisterData.fromJS(_data["data"]) : <any>undefined;
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): RegisterResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["error"] = this.error;
        return data;
    }
}

export interface IRegisterResponse {
    success?: boolean;
    statusCode?: number;
    message?: string | undefined;
    data?: RegisterData;
    error?: string | undefined;
}

export class SellTickerData implements ISellTickerData {
    symbol?: string | undefined;
    quantity?: number;
    price?: number;
    totalCost?: number;
    remainingCashBalance?: number;
    transactionTime?: Date;
    transactionId?: string | undefined;
    status?: TransactionStatus;

    constructor(data?: ISellTickerData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.symbol = _data["symbol"];
            this.quantity = _data["quantity"];
            this.price = _data["price"];
            this.totalCost = _data["totalCost"];
            this.remainingCashBalance = _data["remainingCashBalance"];
            this.transactionTime = _data["transactionTime"] ? new Date(_data["transactionTime"].toString()) : <any>undefined;
            this.transactionId = _data["transactionId"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): SellTickerData {
        data = typeof data === 'object' ? data : {};
        let result = new SellTickerData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["symbol"] = this.symbol;
        data["quantity"] = this.quantity;
        data["price"] = this.price;
        data["totalCost"] = this.totalCost;
        data["remainingCashBalance"] = this.remainingCashBalance;
        data["transactionTime"] = this.transactionTime ? this.transactionTime.toISOString() : <any>undefined;
        data["transactionId"] = this.transactionId;
        data["status"] = this.status;
        return data;
    }
}

export interface ISellTickerData {
    symbol?: string | undefined;
    quantity?: number;
    price?: number;
    totalCost?: number;
    remainingCashBalance?: number;
    transactionTime?: Date;
    transactionId?: string | undefined;
    status?: TransactionStatus;
}

export class SellTickerRequest implements ISellTickerRequest {
    symbol!: string;
    quantity!: number;
    price!: number;

    constructor(data?: ISellTickerRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.symbol = _data["symbol"];
            this.quantity = _data["quantity"];
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): SellTickerRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SellTickerRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["symbol"] = this.symbol;
        data["quantity"] = this.quantity;
        data["price"] = this.price;
        return data;
    }
}

export interface ISellTickerRequest {
    symbol: string;
    quantity: number;
    price: number;
}

export class SellTickerResponse implements ISellTickerResponse {
    success?: boolean;
    statusCode?: number;
    message?: string | undefined;
    data?: SellTickerData;
    error?: string | undefined;

    constructor(data?: ISellTickerResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.data = _data["data"] ? SellTickerData.fromJS(_data["data"]) : <any>undefined;
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): SellTickerResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SellTickerResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["error"] = this.error;
        return data;
    }
}

export interface ISellTickerResponse {
    success?: boolean;
    statusCode?: number;
    message?: string | undefined;
    data?: SellTickerData;
    error?: string | undefined;
}

export enum TransactionStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class UserPortfolioRequest implements IUserPortfolioRequest {
    symbol?: string | undefined;
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    includeInactive?: boolean | undefined;

    constructor(data?: IUserPortfolioRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.symbol = _data["symbol"];
            this.fromDate = _data["fromDate"] ? new Date(_data["fromDate"].toString()) : <any>undefined;
            this.toDate = _data["toDate"] ? new Date(_data["toDate"].toString()) : <any>undefined;
            this.includeInactive = _data["includeInactive"];
        }
    }

    static fromJS(data: any): UserPortfolioRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserPortfolioRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["symbol"] = this.symbol;
        data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>undefined;
        data["toDate"] = this.toDate ? this.toDate.toISOString() : <any>undefined;
        data["includeInactive"] = this.includeInactive;
        return data;
    }
}

export interface IUserPortfolioRequest {
    symbol?: string | undefined;
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    includeInactive?: boolean | undefined;
}

export class UserPortfolioResponse implements IUserPortfolioResponse {
    success?: boolean;
    statusCode?: number;
    message?: string | undefined;
    data?: PortfolioData;
    error?: string | undefined;

    constructor(data?: IUserPortfolioResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.data = _data["data"] ? PortfolioData.fromJS(_data["data"]) : <any>undefined;
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): UserPortfolioResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserPortfolioResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["error"] = this.error;
        return data;
    }
}

export interface IUserPortfolioResponse {
    success?: boolean;
    statusCode?: number;
    message?: string | undefined;
    data?: PortfolioData;
    error?: string | undefined;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

}